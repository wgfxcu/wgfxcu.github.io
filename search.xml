<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[Hexo搭建GitHub博客（二）- Hexo配置使用]]></title>
      <url>%2F2016%2F12%2F07%2FHexo%E9%85%8D%E7%BD%AE%E4%BD%BF%E7%94%A8%2F</url>
      <content type="text"><![CDATA[这篇博文主要介绍Hexo的配置安装和Hexo的常用命令，还有如何部署博客到GitHub。 Hexo 安装打开Git命令行，执行如下命令 $ npm install -g hexo 初始化博客安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。 123$ hexo init blog$ cd blog$ npm install 新建完成后，指定文件夹的目录如下： 12345678.├── _config.yml├── package.json├── scaffolds├── source| ├── _drafts| └── _posts└── themes _config.yml1网站的配置信息，您可以在此配置大部分的参数。 package.json应用程序的信息。EJS, Stylus 和 Markdown renderer 已默认安装，您可以自由移除。 123456789101112131415161718192021222324package.json&#123; &quot;name&quot;: &quot;hexo-site&quot;, &quot;version&quot;: &quot;0.0.0&quot;, &quot;private&quot;: true, &quot;hexo&quot;: &#123; &quot;version&quot;: &quot;3.2.2&quot; &#125;, &quot;dependencies&quot;: &#123; &quot;hexo&quot;: &quot;^3.2.0&quot;, &quot;hexo-deployer-git&quot;: &quot;^0.2.0&quot;, &quot;hexo-generator-archive&quot;: &quot;^0.1.4&quot;, &quot;hexo-generator-category&quot;: &quot;^0.1.3&quot;, &quot;hexo-generator-index&quot;: &quot;^0.2.0&quot;, &quot;hexo-generator-searchdb&quot;: &quot;^1.0.3&quot;, &quot;hexo-generator-tag&quot;: &quot;^0.2.0&quot;, &quot;hexo-migrator-rss&quot;: &quot;^0.1.2&quot;, &quot;hexo-renderer-ejs&quot;: &quot;^0.2.0&quot;, &quot;hexo-renderer-marked&quot;: &quot;^0.2.10&quot;, &quot;hexo-renderer-stylus&quot;: &quot;^0.3.1&quot;, &quot;hexo-server&quot;: &quot;^0.2.0&quot;, &quot;hexo-toc&quot;: &quot;^1.0.4&quot; &#125;&#125; scaffolds模版文件夹。当您新建文章时，Hexo 会根据 scaffold 来建立文件。 source资源文件夹是存放用户资源的地方。除 posts 文件夹之外，开头命名为 (下划线)的文件 / 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 public 文件夹，而其他文件会被拷贝过去。 themes主题文件夹。Hexo 会根据主题来生成静态页面。 配置您可以在 _config.yml 中修改大部份的配置。 网站 网址 网站存放在子目录 如果您的网站存放在子目录中，例如 http://yoursite.com/blog，则请将您的 url 设为 http://yoursite.com/blog 并把 root 设为 /blog/。 目录 文章 分类 &amp; 标签 日期 / 时间格式Hexo 使用 Moment.js 来解析和显示时间。 分页 扩展 Hexo 指令init$ hexo init [folder] 新建一个网站。如果没有设置 folder，Hexo 默认在目前的文件夹建立网站。 new$ hexo new [layout] &lt;title&gt; 新建一篇文章。如果没有设置 layout 的话，默认使用 _config.yml 中的 default_layout 参数代替。如果标题包含空格的话，请使用引号括起来。 generate$ hexo generate 生成静态文件。 publish$ hexo publish [layout] &lt;filename&gt; 发表草稿。 server$ hexo server 启动服务器。默认情况下，访问网址为： http://localhost:4000/。 deploy$ hexo deploy 部署网站。 render$ hexo render &lt;file1&gt; [file2] ... 渲染文件。 migrate$ hexo migrate &lt;type&gt; 从其他博客系统迁移内容。 clean$ hexo clean 清除缓存文件 (db.json) 和已生成的静态文件 (public)。 list$ hexo list &lt;type&gt; 列出网站资料。 version$ hexo version 显示 Hexo 版本。 选项安全模式$ hexo --safe 在安全模式下，不会载入插件和脚本。当您在安装新插件遭遇问题时，可以尝试以安全模式重新执行。 调试模式$ hexo --debug 在终端中显示调试信息并记录到 debug.log。当您碰到问题时，可以尝试用调试模式重新执行一次，并 提交调试信息到 GitHub。 简洁模式$ hexo --silent 隐藏终端信息。 自定义配置文件的路径$ hexo --config custom.yml 自定义配置文件的路径，执行后将不再使用 _config.yml。 显示草稿$ hexo --draft 显示 source/_drafts 文件夹中的草稿文章。 自定义 CWD$ hexo --cwd /path/to/cwd 自定义当前工作目录（Current working directory）的路径。 测试启动Server运行以下命令 $ hexo server Hexo server启动后，在浏览器中打开http://localhost:4000/ 即可访问自己的博客，按Ctrl+C停止 创建文章运行以下命令，可生成一篇文章，刷新http://localhost:4000/ 即可看到新生成的文章。 $ hexo new &quot;hello-hexo&quot; 同时在/blog/source/_posts目录下会生成一个”hello-hexo.md”的markdown文件，可以使用一个支持markdown语法的编辑器来编辑该文件，刷新http://localhost:4000/ 即可看到修改后的结果。 打开这个文件 生成静态网页运行以下命令，将markdown文件生成静态网页。 $ hexo generate 同时在/blog/目录下会生成一个public文件夹，里面是生成的静态文件。 部署到GitHub至此我们已经可以在本地访问自己的博客了，但是只有本地能够看到，要部署到GitHub上面别人才能看到。我们可以在本地调试编辑好文章后再推送到GitHub上面。下面是部署到GitHub的过程。 创建github page在第一篇文章中我们已经在自己的github中创建了自己的github page。参考Hexo搭建GitHub博客（一）- 环境搭建 安装自动部署到GitHub的插件在初始化博客的时候运行的npm install命令默认并没有安装这个插件，所以要手动安装。运行以下命令 $ npm install hexo-deployer-git 修改站点配置文件 修改位于 blog 目录下的 _config.yml 文件找到以下内容 repository是自己github page的项目地址 运行hexo deploy命令运行以下命令 $ hexo deploy 过程中会提示输入你的github账号和密码，等待命令运行完成即可。部署完成后，在浏览器中访问https://wgfxcu.github.io能够看到你在本地调试好的博客，表示部署成功！ 部署步骤总结至此，部署到GitHub的工作已经完成，之后如果我们希望对自己的博客进行修改或者需要发布新的文章时，可以按以下三步进行。123$ hexo clean # 删除已经生成的静态页面 $ hexo generate $ hexo deploy]]></content>
    </entry>

    
    <entry>
      <title></title>
      <url>%2F2016%2F12%2F07%2FNexT%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE%E4%BD%BF%E7%94%A8%2F</url>
      <content type="text"><![CDATA[title: Hexo搭建GitHub博客（三）- NexT主题配置使用date: 2016-12-07 16:07:23categories: hexotags: hexo GitHubPage NexT是一款简洁优雅且易于使用的主题，配置比较简单，只需要稍微修改配置文件即可，功能也比较全，分类、归档、标签显示明了，让人一看就知道干嘛的。 NexT主题官方文档还算详细，但是有些部分的介绍不够详细，这里我做部分补充，并对自己做了修改的部分作介绍。 在 Hexo 中有两份主要的配置文件，其名称都是 _config.yml。 其中，一份位于站点根目录下，主要包含 Hexo 本身的配置；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。 为了描述方便，在以下说明中，将前者称为 站点配置文件， 后者称为 主题配置文件。 安装 NexTHexo 安装主题的方式非常简单，只需要将主题文件拷贝至站点目录的 themes 目录下， 然后修改下配置文件即可。具体到 NexT 来说，安装步骤如下。 下载主题如果你熟悉 Git， 建议你使用 克隆最新版本 的方式，之后的更新可以通过 git pull 来快速更新， 而不用再次下载压缩包替换。在终端窗口下，定位到 Hexo 站点目录下。使用 Git checkout 代码 123456789101112$ cd your-hexo-site $ git clone https://github.com/iissnan/hexo-theme-next themes/next``` ### 启用主题 与所有 Hexo 主题启用的模式一样。 当 克隆/下载 完成后，打开 &lt;code&gt;站点配置文件&lt;/code&gt;， 找到 theme 字段，并将其值更改为 next。``` \# Extensions \## Plugins: https://hexo.io/plugins/\## Themes: https://hexo.io/themes/theme: next]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Hexo搭建GitHub博客（一）- 环境搭建]]></title>
      <url>%2F2016%2F12%2F05%2FHexo%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%2F</url>
      <content type="text"><![CDATA[前言之前无意中发现conglang的github博客，简洁干净，符合我的style。后来发现他使用HEXO+GitHub+Next主题搭建的。按耐不住就索性自己也来一个。同时也记录一下自己的实现过程，做个备案。 推荐理由: 免费：github提供gh-pages服务是免费的，有300MB空间； 开源：由于github开源的原因，有很多人参与其中，自然技术支持很好。 便捷：博客完全托管在github上，基本上不需要花时间去管理，博客使用Markdown语法，上手很容易。 需要了解的内容（能掌握更好）： html+css+javascript git基本语法 markdown语法 nodejs 说明：本次搭建的环境是：Ubuntu14.04 安装 Git安装 Git 客户端 安装 Git 客户端 下载地址 安装Git客户端：Windows用户直接Next就可以了。Mac和Linxu系统的用户可通过命令方式安装，这里不详细介绍了。 附上廖雪峰的Git经典入门教程: Git入门教程 注册 GitHub 老手和已注册过的用户略 打开GitHub官网：https://github.com/ 填写注册信息进行注册操作：没有登录的用户打开网站首页就会显示注册的操作（如图所示），或者是点击Sign up按钮进入注册详情页。 填写好注册信息，点击Sign up for GitHub(注册)按钮后，接下来是选择协议部分。根据自己的情况选择相关的协议，一般人选的都是免费的那一项。 创建仓库 登录github账号：在github首页点击Sign in按钮进入登录页面。填写用户名或邮箱和密码，点击Sign in按钮登录。 点击创建仓库：点击在登录的用户图像左边的+号和下三角符号按钮。 填写创建仓库信息：仓库名称必须是用户名.github.io（别问我为什么，人家就是这样规定的），比如我的用户名是wgfxcu，就是wgfxcu.github.io。 填写好相关信息，点击Create repository(创建仓库)按钮。 配置 SSH 老手和已注册过的用户略 打开Git Bash终端：在桌面右键，会出现”Git Bash here”的选项，点击即可。 设置user name和email： $ git config --global user.name &quot;你的GitHub用户名&quot; $ git config --global user.email &quot;你的GitHub注册邮箱&quot; 生成ssh密钥:输入下面命令 $ ssh-keygen -t rsa -C &quot;你的GitHub注册邮箱&quot; 一般情况下是不需要密码的，所以，接下来直接回车就好。 此时，在用户文件夹下就会有一个新的文件夹.ssh，里面有刚刚创建的ssh密钥文件id_rsa和id_rsa.pub。 注：id_rsa文件是私钥，要妥善保管，id_rsa.pub是公钥文件. 添加公钥到github： 点击用户头像，然后点击显示的Settings(设置)选项； 在用户设置栏，点击SSH and GPG keys选项，然后点击New SSH key(新建SSH)按钮； 将id_rsa.pub中的内容复制到Key文本框中，然后点击Add SSH key(添加SSH)按钮； 测试 SSH: $ ssh -T git@github.com 接下来会出来下面的确认信息： The authenticity of host &apos;github.com (207.97.227.239)&apos; can&apos;t be established. RSA key fingerprint is 17:24:ac:a5:76:28:24:36:62:1b:36:4d:eb:df:a6:45. Are you sure you want to continue connecting (yeso)? 输入yes后回车。 然后显示如下信息则OK(其中的SeayXu是用户名)。 Hi wgfxcu! You&apos;ve successfully authenticated, but GitHub does not provide shell access. 搭建 Node.js 开发环境本次没有使用ubuntu自带的nodejs版本，实在是版本太低。也没有使用源码进行安装，实在是太麻烦。根据Hexo官方文档使用nvm管理和安装Node.js。nvm 的全称是 Node Version Manager，之所以需要这个工具，是因为 Node.js 的各种特性都没有稳定下来，所以我们经常由于老项目或尝新的原因，需要切换各种版本。 安装 nvmcURL: $ curl https://raw.github.com/creationix/nvm/master/install.sh | sh Wget: $ wget -qO- https://raw.github.com/creationix/nvm/master/install.sh | sh 脚本下载nvm仓库下载到 ~/.nvm , 同时在你的配置文件中添加源代码行 (~/.bash_profile, ~/.zshrc, ~/.profile, or ~/.bashrc)。 export NVM_DIR=&quot;$HOME/.nvm&quot; [ -s &quot;$NVM_DIR/nvm.sh&quot; ] &amp;&amp; . &quot;$NVM_DIR/nvm.sh&quot; # This loads nvm 如果你在shell命令行中输入nvm，得到的是 nvm: command not found。你需要在命令行中执行以下命令： source ~/.bashrc 安装切换各版本 node/npmnvm install stable #安装最新稳定版 node，现在是 v7.2.0 nvm install 6.0.0 #安装 6.0.0 版本 nvm install 0.12.7 #安装 0.12.7 版本 # 特别说明：以下模块安装仅供演示说明，并非必须安装模块 nvm use 0 #切换至 0.12.7 版本 nvm use 6 #切换至 6.0.0 版本 nvm alias default 7.2.0 #设置默认 node 版本为 7.2.0 这时候可以看到自己安装的所有 Node.js 版本，输出应如下： 使用 .nvmrc 文件配置项目所使用的 node 版本如果你的默认 node 版本（通过 nvm alias 命令设置的）与项目所需的版本不同，则可在项目根目录或其任意父级目录中创建 .nvmrc 文件，在文件中指定使用的 node 版本号，例如： cd &lt;项目根目录&gt; #进入项目根目录 echo 7 &gt; .nvmrc #添加 .nvmrc 文件 nvm use #无需指定版本号，会自动使用 .nvmrc 文件中配置的版本 node -v #查看 node 是否切换为对应版本 nvm 与 n 的区别node 版本管理工具还有一个是 TJ 大神的 n 命令，n 命令是作为一个 node 的模块而存在，而 nvm 是一个独立于 node/npm 的外部 shell 脚本，因此 n 命令相比 nvm 更加局限。 由于 npm 安装的模块路径均为 /usr/local/lib/node_modules ，当使用 n 切换不同的 node 版本时，实际上会共用全局的 node/npm 目录。 因此不能很好的满足『按不同 node 版本使用不同全局 node 模块』的需求。 因此建议各位尽早开始使用 nvm ，以免出现全局模块无法更新的问题。关于 nvm 和 n 详细区别可以参考淘宝前端团队(FED)博客。 ###]]></content>
    </entry>

    
  
  
</search>
